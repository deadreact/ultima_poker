
// Copyright (c) 2010-2016 niXman (i dot nixman dog gmail dot com). All
// rights reserved.
//
// This file is part of YAS(https://github.com/niXman/yas) project.
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//
//
//
// Boost Software License - Version 1.0 - August 17th, 2003
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.

#ifndef _yas__serializers__detail__boost_fusion_containers_for_each_hpp
#define _yas__serializers__detail__boost_fusion_containers_for_each_hpp

#include <yas/detail/type_traits/type_traits.hpp>
#include <yas/detail/type_traits/properties.hpp>

namespace yas {
namespace detail {

/**************************************************************************/

template<typename Archive>
struct ofusion_sequence_apply {
	ofusion_sequence_apply(Archive &ar)
		:ar(ar)
	{}

	template<typename T>
	void operator()(const T &v) const {
		if ( is_binary_archive<Archive>::value ) {
			if ( is_fundamental_and_sizeof_is<T, 1>::value )
				ar.write(&v, sizeof(v));
			else
				ar & v;
		} else {
			ar & v;
		}
	}

	Archive &ar;
};

template<typename Archive>
struct ifusion_sequence_apply {
	ifusion_sequence_apply(Archive &ar)
		:ar(ar)
	{}

	template<typename T>
	void operator()(T &v) const {
		if ( is_binary_archive<Archive>::value ) {
			if ( is_fundamental_and_sizeof_is<T, 1>::value )
				ar.read(&v, sizeof(v));
			else
				ar & v;
		} else {
			ar & v;
		}
	}

	Archive &ar;
};

/**************************************************************************/

} // ns detail
} // ns yas

#endif // _yas__serializers__detail__boost_fusion_containers_for_each_hpp
